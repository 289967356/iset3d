function [ieObject,scaleFactor] = piDat2ISET(inputFile,varargin)
% Read a .dat file rendered by PBRT, and return an ieObject or a metadataMap
%
% Brief description:
%    We take a dat file from pbrt as input. We return an optical image.
%
% Inputs
%   inputFile -  Multi-spectral .dat image data generated by pbrt.
%
% Optional key/value pairs
%   label     -  Specify the type of data: radiance, mesh, depth.
%                Default is radiance
%
% Output
%   ieObject: if label is radiance: optical image;
%             else, a metadatMap
%
% Zhenyi/BW SCIEN Stanford, 2018
%
% See also
%   piReadDAT, oiCreate, oiSet;

%% Examples
%{
 opticalImage = piDat2ISET('scene.dat','label','radiance','recipe',thisR);
 meshImage    = piDat2ISET('mesh.dat','label','mesh');
 depthImage   = piDat2ISET('depth.dat','label','depth');
%}

%%
p = inputParser;
varargin =ieParamFormat(varargin);
p.addRequired('inputFile',@(x)ischar(x));
p.addParameter('label','radiance',@(x)ischar(x));
p.addParameter('scaleFactor',[],@(x)isnumeric(x));
p.addParameter('recipe',[],@(x)(isequal(class(x),'recipe')));
p.parse(inputFile,varargin{:});
label       = p.Results.label;
scaleFactor = p.Results.scaleFactor;
thisR       = p.Results.recipe;

if ~exist(inputFile,'file')
    error('Cannot find output file. \n');
end

%% Depending on label, assign the output data properly to ieObject

if(strcmp(label,'radiance'))
    energy = piReadDAT(inputFile, 'maxPlanes', 31);
    % Convert photons units, if necessary
    % If we used RGB primaries when rendering, the output should be in energy
    % units not quanta. There is some arbitrariness about this however, so we
    % should fix a standard at some point.
    wave = 400:10:700; % Hard coded in pbrt
    % The scaling factor comes from the display primary units. In
    % PBRT the display primaries are normalized to 1, the scaling
    % factor to convert back to real units is then reapplied here.
    photons = Energy2Quanta(wave,energy)*0.003664;
elseif(strcmp(label,'depth') || strcmp(label,'mesh')||strcmp(label,'material') )
    tmp = piReadDAT(inputFile, 'maxPlanes', 31);
    metadataMap = tmp(:,:,1); clear tmp;
    ieObject = metadataMap;
    return;
elseif(strcmp(label,'coordinates'))
    tmp = piReadDAT(inputFile, 'maxPlanes', 31);
    coordMap = tmp(:,:,1:3); clear tmp;
    ieObject = coordMap;
    return;
end

%% Read the data and set some of the ieObject parameters

pbrtFile = thisR.outputFile;
[~,name,~] = fileparts(pbrtFile);
ieObjName = sprintf('%s-%s',name,datestr(now,'mmm-dd,HH:MM'));

% If radiance, return a scene or optical image

opticsType = thisR.get('optics type');
switch opticsType
    case 'lens'
        % If we used a lens, the ieObject is an optical image (irradiance).
        
        % This scaleFactor stuff seems confusing to me.  This comment is
        % intended to suggest that we change piOICreate() so that we can
        % send in the mean illuminance for a 1mm^2 aperture.  The aperture
        % is equal to
        %
        %   focalLength/fNumber = focalLength/(focalLength/aperture)
        %
        
        % See if we can find the optics parameters
        [focalLength, fNumber, filmDiag, ~, success] = ...
            piRecipeFindOpticsParams(thisR);
        if(success)
            ieObject = piOICreate(photons,...
                'focalLength',focalLength,...
                'fNumber',fNumber,...
                'filmDiag',filmDiag);
        else
            % Could not find the optics parameters. Using default.
            ieObject = piOICreate(photons);
        end
        ieObject = oiSet(ieObject,'name',ieObjName);
        %      I think we are reading only one file at once, so the following three lines should go to piRender;(Zhenyi)
        %{
         if(~isempty(metadataMap))
             ieObject = oiSet(ieObject,'depth map',metadataMap);
         end
        %}
        % This always worked in ISET, but not in ISETBIO.  So I stuck in a
        % hack to ISETBIO to make it work there temporarily and created an
        % issue. (BW).
        ieObject = oiSet(ieObject,'optics model','iset3d');
        if ~isempty(thisR)
            lensfile = thisR.get('lens file');
            ieObject = oiSet(ieObject,'optics name',lensfile);
        else
            warning('Render recipe is not specified.');
        end
        % If the user provide a scaling factor, scale the photons with this
        % value. Otherwise scale the photons to produce a reasonable
        % illuminance.
        if(isempty(scaleFactor))
            % TL: So ideally we should change oiAdjustIlluminance so that
            % it returns the scaling factor, but I'm a bit afraid to change
            % things in ISETBIO. So for now we can just calculate the scale
            % after the fact.
            oldPhotons  = oiGet(ieObject,'photons');
            ieObject    = oiAdjustIlluminance(ieObject,5);
            newPhotons  = oiGet(ieObject,'photons');
            scaleFactor = mode(newPhotons(:)./oldPhotons(:)); % Should be the same value everywhere.
        else
            photons = oiGet(ieObject,'photons');
            ieObject = oiSet(ieObject,'photons',photons*scaleFactor);
            
            % ISETBIO seems to have a bug where it doesn't automatically
            % calculate new illuminance, so here we force it.
            ieObject.data.illuminance = oiCalculateIlluminance(ieObject);
        end
        
    case {'pinhole','environment'}
        % In this case, we the radiance describes the scene, not an oi
        if(isempty(scaleFactor))
            oldPhotons = photons;
            ieObject = piSceneCreate(photons,'meanLuminance',100);
            newPhotons = sceneGet(ieObject,'photons');
            scaleFactor = mode(newPhotons(:)./oldPhotons(:))';
        else
            warning('Cannot set scale factor for scene.');
            ieObject = piSceneCreate(photons,'meanLuminance',100);
        end
end

% Give the ISET object a name
ieObject = sceneSet(ieObject,'name',ieObjName);
% There may be other parameters here in this future
if ~isempty(thisR)
    ieObject = sceneSet(ieObject,'fov',thisR.get('fov'));
else
    warning('Render recipe is not specified.');
end

end


