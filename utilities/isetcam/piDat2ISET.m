function ieObject = piDat2ISET(inputFile, varargin)
% Read a dat-file rendered by PBRT, and return an ieObject or a metadataMap
%
% Syntax:
%   ieObject = piDat2ISET(inputFile, [varargin])
%
% Brief description:
%    We take a dat-file from pbrt as input. We return an optical image.
%
% Inputs:
%    inputFile             - String. The filename for a Multi-spectral
%                            dat-file generated by pbrt.
%
% Outputs:
%    ieObject              - Object. The relevant object based on input
%                            value(s). If the label is radiance: optical
%                            image; else, a metadatMap.
%
% Optional key/value pairs
%    label                 - String. Specify the type of data: radiance,
%                            mesh, depth. Default is radiance.
%    scaleIlluminance      - Boolean. If true, scale the mean illuminance
%                            by the pupil diameter. Default is true.
%    recipe                - Object. A recipe object. Default is [].
%    meanLuminance         - Numeric. The mean luminance. Default is 100.
%    meanIlluminancePerMM2 - Numeric. The mean luminance per mm^2 in the
%                            object, Default is 5.
%
% See Also:
%   piReadDAT, oiCreate, oiSet
%

% History:
%    XX/XX/18  Zhenyi/BW  SCIEN Stanford, 2018
%    04/01/19  JNM        Documentation pass
%    04/18/19  JNM  Merge Master in (resolve conflicts)
%    05/09/19  JNM  Merge Master in again
%    07/30/19  JNM  Rebase from Master

% Examples:
%{
    opticalImage = piDat2ISET('scene.dat', 'label', 'radiance', ...
        'recipe', thisR);
    meshImage = piDat2ISET('mesh.dat', 'label', 'mesh');
    depthImage = piDat2ISET('depth.dat', 'label', 'depth');
%}

%%
p = inputParser;
if length(varargin) > 1
    for i = 1:length(varargin)
        if ~(isnumeric(varargin{i}) | islogical(varargin{i}) | ...
                isobject(varargin{i}))
            varargin{i} = ieParamFormat(varargin{i});
        end
    end
else
    varargin = ieParamFormat(varargin);
end

p.addRequired('inputFile', @(x)(exist(x, 'file')));
p.addParameter('label', 'radiance', @(x)ischar(x));
p.addParameter('recipe', [], @(x)(isequal(class(x), 'recipe')));
p.addParameter('meanluminance', 100, @isnumeric);
p.addParameter('meanilluminancepermm2', 5, @isnumeric);
p.addParameter('scaleIlluminance', true, @islogical);

p.parse(inputFile, varargin{:});
label = p.Results.label;
thisR = p.Results.recipe;
meanLuminance = p.Results.meanluminance;
meanIlluminancepermm2 = p.Results.meanilluminancepermm2;
scaleIlluminance = p.Results.scaleIlluminance;

%% Depending on label, assign the output data properly to ieObject
wave = 400:10:700; % Hard coded in pbrt
nWave = length(wave);
if strcmpi(label, 'radiance')
    % The PBRT output is in energy units. Scenes and OIs data are
    % represented in photons
    energy = piReadDAT(inputFile, 'maxPlanes', nWave);
    photons = Energy2Quanta(wave, energy);

    % The scaling factor comes from the display primary units. In
    % PBRT the display primaries are normalized to 1, the scaling
    % factor to convert back to real units is then reapplied here.
    %    OLD:  photons = Energy2Quanta(wave, energy) * 0.003664;
elseif strcmpi(label, 'depth') || strcmpi(label, 'mesh') || ...
        strcmpi(label, 'material')
    tmp = piReadDAT(inputFile, 'maxPlanes', nWave);
    metadataMap = tmp(:, :, 1);
    clear tmp;
    ieObject = metadataMap;
    return;
elseif strcmpi(label, 'coordinates')
    tmp = piReadDAT(inputFile, 'maxPlanes', nWave);
    coordMap = tmp(:, :, 1:3);
    clear tmp;
    ieObject = coordMap;
    return;
end

%% Read the data and set some of the ieObject parameters
% Create a name for the ISET object
pbrtFile = thisR.outputFile;
[~, name, ~] = fileparts(pbrtFile);
ieObjName = sprintf('%s-%s', name, datestr(now, 'mmm-dd, HH:MM'));

% If radiance, return a scene or optical image
opticsType = thisR.get('optics type');
switch opticsType
    case 'lens'
        % If we used a lens, the ieObject is an optical image (irradiance).

        % We specify the mean illuminance of the OI mean illuminance with
        % respect to a 1 mm^2 aperture. That way, if we change the
        % aperture, but nothing else, we guarantee the illuminance level
        % will scale correctly.

        % Try to find the optics parameters from the lensfile in the PBRT
        % recipe. The function looks for metadata, if it cannot find that
        % slot it tries to decode the file name. The file name part should
        % go away before too long because we can just create the metadata
        % once from the file name.
        [focalLength, fNumber] = piRecipeFindOpticsParams(thisR);

        % Start building the oi
        ieObject = piOICreate(photons);

        % Set the parameters the best we can from the lens file.
        if ~isempty(focalLength)
            ieObject = oiSet(ieObject, 'optics focal length', focalLength); 
        end
        if ~isempty(fNumber)
            ieObject = oiSet(ieObject, 'optics fnumber', fNumber); 
        end

        % Calculate and set the oi 'fov' using the film diagonal size and
        % the lens information. First get width of the film size. This
        % could be a function inside of get.
        filmDiag = thisR.get('film diagonal') * 10 ^ -3;  % In meters
        res = thisR.get('film resolution');
        x = res(1);
        y = res(2);

        % Number of samples along the diagonal
        d = sqrt(x ^ 2 + y ^ 2);
        % Diagonal size by d gives us mm per step
        filmwidth = (filmDiag / d) * x;

        % Next calculate the fov
        focalLength = oiGet(ieObject, 'optics focal length');
        fov = 2 * atan2d(filmwidth / 2, focalLength);
        ieObject = oiSet(ieObject, 'fov', fov);

        ieObject = oiSet(ieObject, 'name', ieObjName);

        ieObject = oiSet(ieObject, 'name', ieObjName);
        ieObject = oiSet(ieObject, 'optics model', 'iset3d');
        if ~isempty(thisR)
            lensfile = thisR.get('lens file');
            ieObject = oiSet(ieObject, 'optics name', lensfile);
        else
            warning('Render recipe is not specified.');
        end

        % Set meanIlluminance per square millimeter of the lens aperture.
        if scaleIlluminance
            aperture = oiGet(ieObject, 'optics aperture diameter');
            lensArea = pi * (aperture * 1e3 / 2) ^ 2;
            meanIlluminance = meanIlluminancepermm2 * lensArea;

            ieObject = oiAdjustIlluminance(ieObject, meanIlluminance);
            ieObject.data.illuminance = oiCalculateIlluminance(ieObject);
        end

    case {'pinhole', 'environment'}
        % A scene radiance, not an oi
        ieObject = piSceneCreate(photons, 'meanLuminance', meanLuminance);
        ieObject = sceneSet(ieObject, 'name', ieObjName);
        if ~isempty(thisR)
            % PBRT may have assigned a field of view
            ieObject = sceneSet(ieObject, 'fov', thisR.get('fov'));
        end

    otherwise
        errror('Unknown optics type %s\n', opticsType);
end

end
